// Generated by CoffeeScript 1.3.3
(function() {
  var BaseView, MainView,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseView = (function(_super) {

    __extends(BaseView, _super);

    function BaseView() {
      this.setLoading = __bind(this.setLoading, this);

    }

    BaseView.prototype.setLoading = function(loading) {
      if (loading) {
        return $('#loading').show();
      } else {
        return $('#loading').hide();
      }
    };

    return BaseView;

  })(spore.View);

  /*
  Views go here
  */


  MainView = (function(_super) {

    __extends(MainView, _super);

    function MainView() {
      this.hide = __bind(this.hide, this);

      this.endTrack = __bind(this.endTrack, this);

      this.startTrack = __bind(this.startTrack, this);

      this.showPosition = __bind(this.showPosition, this);

      this.display = __bind(this.display, this);

      this.clear = __bind(this.clear, this);

      this.show = __bind(this.show, this);
      this.el = $('#main');
    }

    MainView.prototype.show = function() {
      this.el.show();
      window.scrollTo(0, 0);
      return this.setLoading(false);
    };

    MainView.prototype.clear = function() {
      return this.el.empty();
    };

    MainView.prototype.display = function() {
      var template;
      template = function() {
        div({
          id: 'girltalk'
        }, function() {
          return img({
            src: 'girltalk.png',
            width: '100%'
          });
        });
        div({
          id: "tracks"
        });
        return div({
          id: "played_tracks"
        });
      };
      return this.el.append(CoffeeKup.render(template));
    };

    MainView.prototype.showPosition = function(millis) {
      return $('#time').text(millis / 1000);
    };

    MainView.prototype.startTrack = function(record) {
      var _this = this;
      return models.Track.fromURI(record.uri, function(spotifyTrack) {
        var template;
        template = function() {
          return div({
            "class": 'album animated bounceIn',
            id: 'album_' + this.record.id
          }, function() {
            div({
              "class": 'album-artwork'
            }, function() {
              return img({
                src: this.spotifyTrack.data.album.cover,
                width: 180
              });
            });
            return div({
              "class": 'album-info'
            }, function() {
              h1(this.spotifyTrack.data.name);
              return h2(this.spotifyTrack.data.artists[0].name);
            });
          });
        };
        return $("#tracks").prepend(CoffeeKup.render(template, {
          spotifyTrack: spotifyTrack,
          record: record
        }));
      });
    };

    MainView.prototype.endTrack = function(record) {
      var _this = this;
      return models.Track.fromURI(record.uri, function(spotifyTrack) {
        var template;
        console.log("end - " + spotifyTrack.data.uri);
        console.log('record.id: ', record.id);
        $('#tracks #album_' + record.id).removeClass('bounceIn').addClass('fadeOutDownBig');
        setTimeout((function() {
          return $('#tracks #album_' + record.id).remove();
        }), 500);
        template = function() {
          return div({
            "class": 'album'
          }, function() {
            return div({
              "class": 'album-artwork'
            }, function() {
              return img({
                src: this.spotifyTrack.data.album.cover,
                width: 64
              });
            });
          });
        };
        return $("#played_tracks").prepend(CoffeeKup.render(template, {
          spotifyTrack: spotifyTrack,
          record: record
        }));
      });
    };

    MainView.prototype.hide = function() {
      return this.el.hide();
    };

    return MainView;

  })(BaseView);

  exports.MainView = MainView;

}).call(this);
