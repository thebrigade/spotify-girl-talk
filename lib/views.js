// Generated by CoffeeScript 1.3.3
(function() {
  var BaseView, MainView,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseView = (function(_super) {

    __extends(BaseView, _super);

    function BaseView() {
      this.setLoading = __bind(this.setLoading, this);

    }

    BaseView.prototype.setLoading = function(loading) {
      if (loading) {
        return $('#loading').show();
      } else {
        return $('#loading').hide();
      }
    };

    return BaseView;

  })(spore.View);

  /*
  Views go here
  */


  MainView = (function(_super) {

    __extends(MainView, _super);

    function MainView() {
      this.hide = __bind(this.hide, this);

      this.showPosition = __bind(this.showPosition, this);

      this.display = __bind(this.display, this);

      this.clear = __bind(this.clear, this);

      this.show = __bind(this.show, this);
      this.el = $('#main');
    }

    MainView.prototype.show = function() {
      this.el.show();
      window.scrollTo(0, 0);
      return this.setLoading(false);
    };

    MainView.prototype.clear = function() {
      return this.el.empty();
    };

    MainView.prototype.display = function() {
      var template,
        _this = this;
      template = function() {
        a({
          id: 'play',
          href: ''
        }, "Play");
        return h1({
          id: "time",
          style: 'color: white;'
        }, "0:00");
      };
      this.el.append(CoffeeKup.render(template));
      return $("#play").click(function(e) {
        e.preventDefault();
        return models.Track.fromURI('spotify:track:4fOFWrYmRUfS9sC9TyOlUb', function(spotifyTrack) {
          return models.player.play(spotifyTrack);
        });
      });
    };

    MainView.prototype.showPosition = function(millis) {
      return $('#time').text(millis / 1000);
    };

    MainView.prototype.hide = function() {
      return this.el.hide();
    };

    return MainView;

  })(BaseView);

  exports.MainView = MainView;

}).call(this);
