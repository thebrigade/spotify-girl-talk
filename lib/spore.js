// Generated by CoffeeScript 1.3.3
(function() {
  var DebugTracker, Fetcher, Presenter, Spore, View,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Spore = (function() {

    function Spore(spotify, trace, appName, tracker) {
      this.spotify = spotify;
      this.trace = trace;
      this.appName = appName;
      this.tracker = tracker;
      this.go = __bind(this.go, this);

      this.handleSessionChange = __bind(this.handleSessionChange, this);

      this.isOffline = __bind(this.isOffline, this);

      this.handlePlayerChange = __bind(this.handlePlayerChange, this);

      this._handleLinks = __bind(this._handleLinks, this);

      this.handleLinks = __bind(this.handleLinks, this);

      this._handleArgs = __bind(this._handleArgs, this);

      this.handleArgs = __bind(this.handleArgs, this);

      this.register = __bind(this.register, this);

      this.trace = (this.trace != null) && this.trace;
      this.map = {};
      this.activeToken = null;
      this.models = this.spotify.require('sp://import/scripts/api/models');
      this.models.application.observe(this.models.EVENT.ARGUMENTSCHANGED, this.handleArgs);
      this.models.application.observe(this.models.EVENT.LINKSCHANGED, this.handleLinks);
      this.models.player.observe(this.models.EVENT.CHANGE, this.handlePlayerChange);
      this.models.session.observe(this.models.EVENT.STATECHANGED, this.handleSessionChange);
    }

    Spore.prototype.register = function(token, presenter) {
      this.map[token] = presenter;
      return presenter.spore = this;
    };

    Spore.prototype.handleArgs = function() {
      return this._handleArgs(this.models.application["arguments"]);
    };

    Spore.prototype._handleArgs = function(args) {
      var presenter, token;
      if (this.trace) {
        console.log("Spore.handleArgs(" + args + ")");
      }
      token = args[0];
      presenter = this.map[token];
      this.tracker.track("" + this.appName + "/" + token);
      if (token !== this.activeToken) {
        if (this.activeToken != null) {
          this.map[this.activeToken].unbind();
        }
        this.activeToken = null;
      }
      if (this.isOffline()) {
        this.offline = true;
        $("body").addClass('loading');
        $("#offline").show();
        $("#overlay").show();
        return;
      } else {
        this.offline = false;
        $("body").removeClass('loading');
        $("#offline").hide();
        $("#overlay").hide();
      }
      if (presenter != null) {
        if (!(this.activeToken != null)) {
          presenter.bind();
        }
        this.activeToken = token;
        return presenter.show(args.splice(1, args.length - 1));
      } else {
        throw new Error("no presenter bound for token '" + token + "'");
      }
    };

    Spore.prototype.handleLinks = function() {
      return this._handleLinks(this.models.application.links);
    };

    Spore.prototype._handleLinks = function(links) {
      if (this.trace) {
        console.log("Spore.handleLinks([" + links + "])");
      }
      if (this.activeToken != null) {
        return this.map[this.activeToken].links(links);
      }
    };

    Spore.prototype.handlePlayerChange = function(playerChange) {
      if (this.trace) {
        console.log("Spore.handlePlayerChange(" + (JSON.stringify(playerChange.data)) + ")");
      }
      if ((this.activeToken != null) && playerChange.data.playstate) {
        return this.map[this.activeToken].playerChange(playerChange);
      }
    };

    Spore.prototype.isOffline = function() {
      var state;
      state = models.session.state;
      return state === 2 || state === 3;
    };

    Spore.prototype.handleSessionChange = function() {
      var stillOffline;
      stillOffline = this.isOffline();
      if (this.offline) {
        if (!this.isOffline()) {
          this.offline = false;
          $("body").removeClass('loading');
          $("#offline").hide();
          $("#overlay").hide();
          return this.handleArgs();
        }
      } else {
        if (this.isOffline()) {
          this.offline = true;
          $("body").addClass('loading');
          $("#offline").show();
          return $("#overlay").show();
        }
      }
    };

    Spore.prototype.go = function() {
      this.handleLinks();
      return this.handleArgs();
    };

    return Spore;

  })();

  DebugTracker = (function() {

    function DebugTracker() {
      this.track = __bind(this.track, this);

    }

    DebugTracker.prototype.track = function(page) {
      return console.log("---------track(" + page + ")------------");
    };

    return DebugTracker;

  })();

  Presenter = (function() {

    function Presenter(view) {
      this.view = view;
      this.playerChange = __bind(this.playerChange, this);

      this.drop = __bind(this.drop, this);

      this.links = __bind(this.links, this);

      this.show = __bind(this.show, this);

      this.unbind = __bind(this.unbind, this);

      this.bind = __bind(this.bind, this);

    }

    Presenter.prototype.bind = function() {};

    Presenter.prototype.unbind = function() {};

    Presenter.prototype.show = function(params) {};

    Presenter.prototype.links = function(links) {};

    Presenter.prototype.drop = function(uri) {};

    Presenter.prototype.playerChange = function(playerChange) {};

    return Presenter;

  })();

  View = (function() {

    function View() {
      this.clear = __bind(this.clear, this);

    }

    View.prototype.clear = function() {};

    return View;

  })();

  Fetcher = (function() {

    function Fetcher() {
      this.go = __bind(this.go, this);

      this.fire = __bind(this.fire, this);

      this.kill = __bind(this.kill, this);

      this.on = __bind(this.on, this);

    }

    Fetcher.prototype.on = function(type, callback) {
      if (!(this.listeners != null)) {
        this.listeners = {};
      }
      if (!(this.listeners[type] != null)) {
        this.listeners[type] = [];
      }
      return this.listeners[type].push(callback);
    };

    Fetcher.prototype.kill = function() {
      return this.listeners.length = 0;
    };

    Fetcher.prototype.fire = function(type, a, b, c, d, e) {
      var listener, _i, _len, _ref, _results;
      _ref = this.listeners[type];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        listener = _ref[_i];
        _results.push(listener(a, b, c, d, e));
      }
      return _results;
    };

    Fetcher.prototype.go = function() {};

    return Fetcher;

  })();

  exports.Spore = Spore;

  exports.Presenter = Presenter;

  exports.View = View;

  exports.Fetcher = Fetcher;

  exports.DebugTracker = DebugTracker;

  exports.createAddAsPlaylistFunction = function(trackSource) {
    return function(e) {
      var name, newPlaylist, track, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _results;
      e.preventDefault();
      $(e.currentTarget).unbind();
      $(e.currentTarget).hide();
      if (((_ref = trackSource.data) != null ? _ref.type : void 0) === 'album') {
        name = "" + ((_ref1 = trackSource.data) != null ? (_ref2 = _ref1.artist) != null ? _ref2.name : void 0 : void 0) + " - " + ((_ref3 = trackSource.data) != null ? _ref3.name : void 0);
      } else {
        name = (_ref4 = trackSource.data) != null ? _ref4.name : void 0;
      }
      newPlaylist = new models.Playlist(name.decodeForText());
      _ref5 = trackSource.tracks;
      _results = [];
      for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
        track = _ref5[_i];
        _results.push(newPlaylist.add(track.uri));
      }
      return _results;
    };
  };

  exports.fixPlaylist = function(listViewNode) {
    var el, scrollFix;
    el = $(listViewNode);
    $('.sp-list').css({
      height: 100
    });
    el.children('div').height(1000);
    scrollFix = function() {
      el.scrollTop(10);
      el.scrollTop(0);
      return $('.sp-list').removeAttr('style');
    };
    return setTimeout(scrollFix, 100);
  };

  exports.createShareFunction = function(source) {
    return function(e) {
      e.preventDefault();
      return models.application.showSharePopup(e.target, source.data.uri);
    };
  };

}).call(this);
