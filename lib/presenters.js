// Generated by CoffeeScript 1.3.3
(function() {
  var MainPresenter, after, every, pollInterval,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  every = function(interval, callback) {
    return setInterval(callback, interval);
  };

  after = function(delay, callback) {
    return setTimeout(callback, delay);
  };

  pollInterval = 20;

  MainPresenter = (function(_super) {

    __extends(MainPresenter, _super);

    function MainPresenter(view) {
      this.view = view;
      this.startPollingTrack = __bind(this.startPollingTrack, this);

      this.playerChange = __bind(this.playerChange, this);

      this.unbind = __bind(this.unbind, this);

      this.show = __bind(this.show, this);

      this.bind = __bind(this.bind, this);

    }

    MainPresenter.prototype.bind = function() {};

    MainPresenter.prototype.show = function(params) {
      this.view.setLoading(true);
      this.view.hide();
      this.view.clear();
      this.view.display();
      this.view.show();
      return this.startPollingTrack();
    };

    MainPresenter.prototype.unbind = function() {
      return this.view.hide();
    };

    MainPresenter.prototype.playerChange = function(playerChange) {
      console.log("got player change");
      console.log(playerChange);
      return this.startPollingTrack();
    };

    MainPresenter.prototype.startPollingTrack = function() {
      var _this = this;
      this.startQueue = JSON.parse(JSON.stringify(model.model));
      this.endQueue = JSON.parse(JSON.stringify(model.model));
      console.log(this.startQueue);
      console.log(this.endQueue);
      if (this.poller != null) {
        clearInterval(this.poller);
      }
      return this.poller = every(pollInterval, function() {
        var pos, record;
        pos = models.player.position;
        _this.view.showPosition(pos);
        console.log(pos);
        console.log(_this.startQueue[0].start);
        console.log(_this.endQueue[0].start);
        if (pos >= _this.startQueue[0].start) {
          record = _this.startQueue.shift();
          _this.view.startTrack(record);
        }
        if (pos >= _this.endQueue[0].end) {
          record = _this.endQueue.shift();
          return _this.view.endTrack(record);
        }
      });
    };

    return MainPresenter;

  })(spore.Presenter);

  exports.MainPresenter = MainPresenter;

}).call(this);
